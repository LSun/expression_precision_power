source("../code/datamaker_gtex.R")
dat = datamaker_gtex(tissue = "heart", Nsample = 5)
counts = dat$counts
condition = dat$condition
dim(condition)
length(condition)
dim(counts)
Nsample = 5
counts = c(rpois(1000 * 2 * Nsample, 1), rpois(1000 * 2 * Nsample, 10), rpois(1000 * 2 * Nsample, 100), rpois(1000 * 2 * Nsample, 1000))
counts = matrix(counts, ncol = 2 * Nsample)
source("../code/fit_method.R")
## effect size and standard error estimated by OLS
log_counts = log2(counts + 1)
ols_fit <- get_ols(log_counts = log_counts, condition = condition)
betahat_ols = ols_fit$betahat
sebetahat_ols = ols_fit$sebetahat
df_ols = ols_fit$df
z_ols = betahat_ols / sebetahat_ols
## effect size and measurement error estimated by voom + limma
voom_fit = voom_transform(counts, condition)
betahat_voom = voom_fit$betahat
sebetahat_voom = voom_fit$sebetahat
df_voom = voom_fit$df
z_voom = betahat_voom / sebetahat_voom
Nsample = 5
counts = c(rpois(1000 * 2 * Nsample, 1), rpois(1000 * 2 * Nsample, 10), rpois(1000 * 2 * Nsample, 100), rpois(1000 * 2 * Nsample, 1000))
counts = matrix(counts, ncol = 2 * Nsample)
condition = rep(1:2, each = Nsample)
source("../code/fit_method.R")
## effect size and standard error estimated by OLS
log_counts = log2(counts + 1)
ols_fit <- get_ols(log_counts = log_counts, condition = condition)
betahat_ols = ols_fit$betahat
sebetahat_ols = ols_fit$sebetahat
df_ols = ols_fit$df
z_ols = betahat_ols / sebetahat_ols
## effect size and measurement error estimated by voom + limma
voom_fit = voom_transform(counts, condition)
betahat_voom = voom_fit$betahat
sebetahat_voom = voom_fit$sebetahat
df_voom = voom_fit$df
z_voom = betahat_voom / sebetahat_voom
group_id = rep(1:4, each = 1000)
boxplot(sebetahat_ols ~ group_id, xlab = "expression level", ylab = "sebetahat", main = "OLS")
boxplot(z_ols ~ group_id, xlab = "expression level", ylab = "z-score", main = "OLS")
abline(0, 0, lty = 3, col = "red")
boxplot(sebetahat_voom ~ group_id, xlab = "expression level", ylab = "sebetahat", main = "voom + limma")
boxplot(z_voom ~ group_id, xlab = "expression level", ylab = "z-score", main = "voom + limma")
abline(0, 0, lty = 3, col = "red")
View(counts)
Nsample = 5
counts = c(rpois(1000 * 2 * Nsample, 1), rpois(1000 * 2 * Nsample, 10), rpois(1000 * 2 * Nsample, 100), rpois(1000 * 2 * Nsample, 1000))
counts = matrix(counts, ncol = 2 * Nsample, byrow = TRUE)
condition = rep(1:2, each = Nsample)
source("../code/fit_method.R")
## effect size and standard error estimated by OLS
log_counts = log2(counts + 1)
ols_fit <- get_ols(log_counts = log_counts, condition = condition)
betahat_ols = ols_fit$betahat
sebetahat_ols = ols_fit$sebetahat
df_ols = ols_fit$df
z_ols = betahat_ols / sebetahat_ols
## effect size and measurement error estimated by voom + limma
voom_fit = voom_transform(counts, condition)
betahat_voom = voom_fit$betahat
sebetahat_voom = voom_fit$sebetahat
df_voom = voom_fit$df
z_voom = betahat_voom / sebetahat_voom
group_id = rep(1:4, each = 1000)
boxplot(sebetahat_ols ~ group_id, xlab = "expression level", ylab = "sebetahat", main = "OLS")
boxplot(z_ols ~ group_id, xlab = "expression level", ylab = "z-score", main = "OLS")
abline(0, 0, lty = 3, col = "red")
boxplot(sebetahat_voom ~ group_id, xlab = "expression level", ylab = "sebetahat", main = "voom + limma")
boxplot(z_voom ~ group_id, xlab = "expression level", ylab = "z-score", main = "voom + limma")
abline(0, 0, lty = 3, col = "red")
Nsample = 5
counts_case = c(rpois(1000 * Nsample, 1), rpois(1000 * Nsample, 10), rpois(1000 * Nsample, 100), rpois(1000 * Nsample, 1000))
counts_case = matrix(counts_case, ncol = Nsample, byrow = TRUE)
counts_control = c(rpois(1000 * Nsample, 1 * b), rpois(1000 * Nsample, 10 * b), rpois(1000 * Nsample, 100 * b), rpois(1000 * Nsample, 1000 * b))
counts_control = matrix(counts_control, ncol = Nsample, byrow = TRUE)
counts = cbind(counts_case, counts_control)
condition = rep(1:2, each = Nsample)
Nsample = 5
b = 2
counts_case = c(rpois(1000 * Nsample, 1), rpois(1000 * Nsample, 10), rpois(1000 * Nsample, 100), rpois(1000 * Nsample, 1000))
counts_case = matrix(counts_case, ncol = Nsample, byrow = TRUE)
counts_control = c(rpois(1000 * Nsample, 1 * b), rpois(1000 * Nsample, 10 * b), rpois(1000 * Nsample, 100 * b), rpois(1000 * Nsample, 1000 * b))
counts_control = matrix(counts_control, ncol = Nsample, byrow = TRUE)
counts = cbind(counts_case, counts_control)
condition = rep(1:2, each = Nsample)
View(counts)
Nsample = 50
mu = 10^(0:7)
mu
?dpois
Nsample = 50
Ngene = 1000
mu = 10^(rep(0:7), each = Nsample * Ngene)
mu = 10^(rep(0:7, each = Nsample * Ngene))
length(mu)
(1:2) * (3:4)
mu = 10^(0:7)
mu
c(rbind(mu, 2 * mu))
rep(c(rbind(mu, 2 * mu)), each = 2)
mu_case = rep(c(rbind(mu, 2 * mu)), each = Nsample * Ngene)
length(mu_case)
count_case = matrix(rpois(leng(mu_case), mu_case), byrow = TRUE, ncol = Nsample)
Nsample = 50
Ngene = 1000
mu = 10^(0:7)
mu_case = rep(c(rbind(mu, 2 * mu)), each = Nsample * Ngene)
count_case = matrix(rpois(length(mu_case), mu_case), byrow = TRUE, ncol = Nsample)
View(count_case)
dim(count_case)
mu_control = rep(c(rbind(2 * mu, mu)), each = Nsample * Ngene)
count_control = matrix(rpois(length(mu_control), mu_control), byrow = TRUE, ncol = Nsample)
Nsample = 50
Ngene = 1000
mu = 10^(0:7)
mu_case = rep(c(rbind(mu, 2 * mu)), each = Nsample * Ngene)
count_case = matrix(rpois(length(mu_case), mu_case), byrow = TRUE, ncol = Nsample)
mu_control = rep(c(rbind(2 * mu, mu)), each = Nsample * Ngene)
count_control = matrix(rpois(length(mu_control), mu_control), byrow = TRUE, ncol = Nsample)
count = cbind(count_case, count_control)
dim(count)
Nsample = 50
Ngene = 1000
mu = 10^(0:7)
mu_case = rep(c(rbind(mu, 2 * mu)), each = Nsample * Ngene)
counts_case = matrix(rpois(length(mu_case), mu_case), byrow = TRUE, ncol = Nsample)
mu_control = rep(c(rbind(2 * mu, mu)), each = Nsample * Ngene)
counts_control = matrix(rpois(length(mu_control), mu_control), byrow = TRUE, ncol = Nsample)
counts = cbind(counts_case, counts_control)
Nsample = 50
Ngene = 1000
mu = 10^(0:7)
counts_maker = function(Nsample, Ngene, mu, DEratio) {
mu_control = rep(c(rbind(mu, DEratio * mu)), each = Nsample * Ngene)
counts_control = matrix(rpois(length(mu_control), mu_control), byrow = TRUE, ncol = Nsample)
mu_case = rep(c(rbind(DEratio * mu, mu)), each = Nsample * Ngene)
counts_case = matrix(rpois(length(mu_case), mu_case), byrow = TRUE, ncol = Nsample)
counts = cbind(counts_case, counts_control)
return(counts)
}
Nsample = 50
Ngene = 1000
mu = 10^(0:7)
counts_maker = function(Nsample, Ngene, mu, DEratio) {
mu_control = rep(c(rbind(mu, DEratio * mu)), each = Nsample * Ngene)
counts_control = matrix(rpois(length(mu_control), mu_control), byrow = TRUE, ncol = Nsample)
mu_case = rep(c(rbind(DEratio * mu, mu)), each = Nsample * Ngene)
counts_case = matrix(rpois(length(mu_case), mu_case), byrow = TRUE, ncol = Nsample)
counts = cbind(counts_case, counts_control)
return(counts)
}
condition = rep(1:2, each = Nsample)
counts = counts_maker(Nsample = Nsample, Ngene = Ngene, mu = mu, DEratio = 2)
dim(counts)
counts[1:5, 1:5]
counts[15000:15005, 1:5]
counts[15000:15005, 95:100]
dgecounts = edgeR::calcNormFactors(edgeR::DGEList(counts = counts, group = condition))
length(dgecounts)
head(dgecounts)
design = model.matrix(~ condition)
log_counts = log2(counts + 1)
ols_fit <- get_ols(log_counts = log_counts, condition = condition)
betahat_ols = ols_fit$betahat
sebetahat_ols = ols_fit$sebetahat
df_ols = ols_fit$df
z_ols = betahat_ols / sebetahat_ols
source("../code/fit_method.R")
## effect size and standard error estimated by OLS
log_counts = log2(counts + 1)
ols_fit <- get_ols(log_counts = log_counts, condition = condition)
betahat_ols = ols_fit$betahat
sebetahat_ols = ols_fit$sebetahat
df_ols = ols_fit$df
z_ols = betahat_ols / sebetahat_ols
## effect size and measurement error estimated by voom + limma
voom_fit = voom_transform(counts, condition)
betahat_voom = voom_fit$betahat
sebetahat_voom = voom_fit$sebetahat
df_voom = voom_fit$df
z_voom = betahat_voom / sebetahat_voom
group_id = rep(1:(2 * length(mu)), each = Ngene)
boxplot(sebetahat_ols ~ group_id, xlab = "expression level", ylab = "sebetahat", main = "OLS")
boxplot(z_ols ~ group_id, xlab = "expression level", ylab = "z-score", main = "OLS")
abline(0, 0, lty = 3, col = "red")
boxplot(log(z_ols) ~ group_id, xlab = "expression level", ylab = "log z-score", main = "OLS")
boxplot(log(abs(z_ols)) ~ group_id, xlab = "expression level", ylab = "log z-score", main = "OLS")
qnorm(0.975)
abline(0, log(qnorm(0.975)), lty = 3, col = "red")
abline(log(qnorm(0.975), 0), lty = 3, col = "red")
boxplot(log(abs(z_ols)) ~ group_id, xlab = "expression level", ylab = "log z-score", main = "OLS")
abline(log(qnorm(0.975), 0), lty = 3, col = "red")
abline(log(qnorm(0.975)), 0, lty = 3, col = "red")
boxplot(log(abs(z_ols)) ~ group_id, xlab = "expression level", ylab = "log |z-score|", main = "OLS")
abline(log(qnorm(0.975)), 0, lty = 3, col = "red")
boxplot(sebetahat_voom ~ group_id, xlab = "expression level", ylab = "sebetahat", main = "TMM + voom + limma")
boxplot(log(abs(z_voom)) ~ group_id, xlab = "expression level", ylab = "log |z-score|", main = "TMM + voom + limma")
abline(0, 0, lty = 3, col = "red")
boxplot(sebetahat_voom ~ group_id, xlab = "expression level", ylab = "sebetahat", main = "TMM + voom + limma")
boxplot(betahat_voom ~ group_id)
boxplot(abs(sebetahat_ols) ~ group_id, xlab = "expression level", ylab = "sebetahat", main = "OLS")
boxplot(abs(betahat_voom) ~ group_id)
v = limma::voom(counts, design, plot=FALSE)
lim = limma::lmFit(v)
betahat.voom = lim$coefficients[, 2]
sebetahat.voom = lim$stdev.unscaled[, 2] * lim$sigma
df.voom = length(condition) - 2
boxplot(abs(betahat_voom) ~ group_id)
boxplot(abs(betahat_voom) ~ group_id)
boxplot(sebetahat_voom ~ group_id, xlab = "expression level", ylab = "sebetahat", main = "TMM + voom + limma")
boxplot(log(abs(z_voom)) ~ group_id, xlab = "expression level", ylab = "log |z-score|", main = "TMM + voom + limma")
lim = limma::lmFit(counts, design)
betahat.voom = lim$coefficients[, 2]
sebetahat.voom = lim$stdev.unscaled[, 2] * lim$sigma
df.voom = length(condition) - 2
boxplot(abs(betahat_voom) ~ group_id)
boxplot(sebetahat_voom ~ group_id, xlab = "expression level", ylab = "sebetahat", main = "TMM + voom + limma")
boxplot(log(abs(z_voom)) ~ group_id, xlab = "expression level", ylab = "log |z-score|", main = "TMM + voom + limma")
boxplot(sebetahat_ols ~ group_id, xlab = "expression level", ylab = "sebetahat", main = "OLS")
boxplot(abs(betahat_ols) ~ group_id)
boxplot(log(abs(z_ols)) ~ group_id, xlab = "expression level", ylab = "log |z-score|", main = "OLS")
boxplot(abs(betahat_ols) ~ group_id)
Nsample = 50
Ngene = 100
mu = 10^(0:7)
counts_maker = function(Nsample, Ngene, mu, DEratio) {
mu_control = rep(c(rbind(mu, DEratio * mu)), each = Nsample * Ngene)
counts_control = matrix(rpois(length(mu_control), mu_control), byrow = TRUE, ncol = Nsample)
mu_case = rep(c(rbind(DEratio * mu, mu)), each = Nsample * Ngene)
counts_case = matrix(rpois(length(mu_case), mu_case), byrow = TRUE, ncol = Nsample)
counts = cbind(counts_case, counts_control)
return(counts)
}
counts = counts_maker(Nsample = Nsample, Ngene = Ngene, mu = mu, DEratio = 2)
condition = rep(1:2, each = Nsample)
dim(counts)
