source("../code/datamaker_gtex.R")
dat = datamaker_gtex(tissue = "heart", Nsample = 5)
counts = dat$counts
condition = dat$condition
dim(condition)
length(condition)
dim(counts)
Nsample = 5
counts = c(rpois(1000 * 2 * Nsample, 1), rpois(1000 * 2 * Nsample, 10), rpois(1000 * 2 * Nsample, 100), rpois(1000 * 2 * Nsample, 1000))
counts = matrix(counts, ncol = 2 * Nsample)
source("../code/fit_method.R")
## effect size and standard error estimated by OLS
log_counts = log2(counts + 1)
ols_fit <- get_ols(log_counts = log_counts, condition = condition)
betahat_ols = ols_fit$betahat
sebetahat_ols = ols_fit$sebetahat
df_ols = ols_fit$df
z_ols = betahat_ols / sebetahat_ols
## effect size and measurement error estimated by voom + limma
voom_fit = voom_transform(counts, condition)
betahat_voom = voom_fit$betahat
sebetahat_voom = voom_fit$sebetahat
df_voom = voom_fit$df
z_voom = betahat_voom / sebetahat_voom
Nsample = 5
counts = c(rpois(1000 * 2 * Nsample, 1), rpois(1000 * 2 * Nsample, 10), rpois(1000 * 2 * Nsample, 100), rpois(1000 * 2 * Nsample, 1000))
counts = matrix(counts, ncol = 2 * Nsample)
condition = rep(1:2, each = Nsample)
source("../code/fit_method.R")
## effect size and standard error estimated by OLS
log_counts = log2(counts + 1)
ols_fit <- get_ols(log_counts = log_counts, condition = condition)
betahat_ols = ols_fit$betahat
sebetahat_ols = ols_fit$sebetahat
df_ols = ols_fit$df
z_ols = betahat_ols / sebetahat_ols
## effect size and measurement error estimated by voom + limma
voom_fit = voom_transform(counts, condition)
betahat_voom = voom_fit$betahat
sebetahat_voom = voom_fit$sebetahat
df_voom = voom_fit$df
z_voom = betahat_voom / sebetahat_voom
group_id = rep(1:4, each = 1000)
boxplot(sebetahat_ols ~ group_id, xlab = "expression level", ylab = "sebetahat", main = "OLS")
boxplot(z_ols ~ group_id, xlab = "expression level", ylab = "z-score", main = "OLS")
abline(0, 0, lty = 3, col = "red")
boxplot(sebetahat_voom ~ group_id, xlab = "expression level", ylab = "sebetahat", main = "voom + limma")
boxplot(z_voom ~ group_id, xlab = "expression level", ylab = "z-score", main = "voom + limma")
abline(0, 0, lty = 3, col = "red")
View(counts)
Nsample = 5
counts = c(rpois(1000 * 2 * Nsample, 1), rpois(1000 * 2 * Nsample, 10), rpois(1000 * 2 * Nsample, 100), rpois(1000 * 2 * Nsample, 1000))
counts = matrix(counts, ncol = 2 * Nsample, byrow = TRUE)
condition = rep(1:2, each = Nsample)
source("../code/fit_method.R")
## effect size and standard error estimated by OLS
log_counts = log2(counts + 1)
ols_fit <- get_ols(log_counts = log_counts, condition = condition)
betahat_ols = ols_fit$betahat
sebetahat_ols = ols_fit$sebetahat
df_ols = ols_fit$df
z_ols = betahat_ols / sebetahat_ols
## effect size and measurement error estimated by voom + limma
voom_fit = voom_transform(counts, condition)
betahat_voom = voom_fit$betahat
sebetahat_voom = voom_fit$sebetahat
df_voom = voom_fit$df
z_voom = betahat_voom / sebetahat_voom
group_id = rep(1:4, each = 1000)
boxplot(sebetahat_ols ~ group_id, xlab = "expression level", ylab = "sebetahat", main = "OLS")
boxplot(z_ols ~ group_id, xlab = "expression level", ylab = "z-score", main = "OLS")
abline(0, 0, lty = 3, col = "red")
boxplot(sebetahat_voom ~ group_id, xlab = "expression level", ylab = "sebetahat", main = "voom + limma")
boxplot(z_voom ~ group_id, xlab = "expression level", ylab = "z-score", main = "voom + limma")
abline(0, 0, lty = 3, col = "red")
Nsample = 5
counts_case = c(rpois(1000 * Nsample, 1), rpois(1000 * Nsample, 10), rpois(1000 * Nsample, 100), rpois(1000 * Nsample, 1000))
counts_case = matrix(counts_case, ncol = Nsample, byrow = TRUE)
counts_control = c(rpois(1000 * Nsample, 1 * b), rpois(1000 * Nsample, 10 * b), rpois(1000 * Nsample, 100 * b), rpois(1000 * Nsample, 1000 * b))
counts_control = matrix(counts_control, ncol = Nsample, byrow = TRUE)
counts = cbind(counts_case, counts_control)
condition = rep(1:2, each = Nsample)
Nsample = 5
b = 2
counts_case = c(rpois(1000 * Nsample, 1), rpois(1000 * Nsample, 10), rpois(1000 * Nsample, 100), rpois(1000 * Nsample, 1000))
counts_case = matrix(counts_case, ncol = Nsample, byrow = TRUE)
counts_control = c(rpois(1000 * Nsample, 1 * b), rpois(1000 * Nsample, 10 * b), rpois(1000 * Nsample, 100 * b), rpois(1000 * Nsample, 1000 * b))
counts_control = matrix(counts_control, ncol = Nsample, byrow = TRUE)
counts = cbind(counts_case, counts_control)
condition = rep(1:2, each = Nsample)
View(counts)
